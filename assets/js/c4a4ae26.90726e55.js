"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[46779],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>_});var s=i(96540);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function _(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}},44002:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>_,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"mcu/sam/sam-sam4s2a-stdio","title":"SAM4S2A stdio","description":"SAM4S2A stdio","source":"@site/docs/mcu/sam/sam-sam4s2a-stdio.mdx","sourceDirName":"mcu/sam","slug":"/mcu/sam/sam-sam4s2a-stdio","permalink":"/docs/mcu/sam/sam-sam4s2a-stdio","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/mcu/sam/sam-sam4s2a-stdio.mdx","tags":[],"version":"current","lastUpdatedAt":1743962785000,"frontMatter":{"id":"sam-sam4s2a-stdio","title":"SAM4S2A stdio","sidebar_label":"stdio","description":"SAM4S2A stdio","keywords":["SAM","USART","stdio"]},"sidebar":"sam","previous":{"title":"USART","permalink":"/docs/mcu/sam/sam-sam4s2a-usart"},"next":{"title":"Time","permalink":"/docs/mcu/sam/sam-sam4s2a-time"}}');var t=i(74848),a=i(28453);const r={id:"sam-sam4s2a-stdio",title:"SAM4S2A stdio",sidebar_label:"stdio",description:"SAM4S2A stdio",keywords:["SAM","USART","stdio"]},_=void 0,o={},d=[{value:"ASF Wizard",id:"asf-wizard",level:2},{value:"src\\config\\conf_board.h",id:"srcconfigconf_boardh",level:2},{value:"src\\config\\conf_uart_serial.h",id:"srcconfigconf_uart_serialh",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"asf-wizard",children:"ASF Wizard"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Standard serial I/O (stdio) (driver): Common standard serial I/O management driver that implements a stdio serial interface on SAM devices."}),"\n",(0,t.jsx)(n.li,{children:"USART - Serial interface (service): Common API which abstracts the user from directly accessing the register and provides a generic serial interface using USART."}),"\n",(0,t.jsx)(n.li,{children:"PIO - Parallel Input/Output Controller (driver): The Parallel Input/Output Controller manages up to 32 fully programmable input/output lines. Each I/O line may be dedicated as a general-purpose I/O or be assigned to a function of an embedded peripheral. This assures effective optimization of the pins of a product."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"srcconfigconf_boardh",children:"src\\config\\conf_board.h"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"#ifndef CONF_BOARD_H\n#define CONF_BOARD_H\n\n#define CONSOLE_UART (Usart *)USART0\n\n/** Enable Com Port. */\n#define CONF_BOARD_UART_CONSOLE\n\n#endif    // CONF_BOARD_H\n"})}),"\n",(0,t.jsx)(n.h2,{id:"srcconfigconf_uart_serialh",children:"src\\config\\conf_uart_serial.h"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"#ifndef CONF_USART_SERIAL_H\n#define CONF_USART_SERIAL_H\n\n/* A reference setting for USART */\n/** USART Interface */\n#define CONF_UART CONSOLE_UART\n/** Baudrate setting */\n#define CONF_UART_BAUDRATE 115200\n/** Character length setting */\n#define CONF_UART_CHAR_LENGTH US_MR_CHRL_8_BIT\n/** Parity setting */\n#define CONF_UART_PARITY US_MR_PAR_NO\n/** Stop bits setting */\n#define CONF_UART_STOP_BITS US_MR_NBSTOP_1_BIT\n\n#define USART_SERIAL             CONF_UART\n#define USART_SERIAL_ID          ID_USART0\n#define USART_SERIAL_BAUDRATE    CONF_UART_BAUDRATE\n#define USART_SERIAL_CHAR_LENGTH CONF_UART_CHAR_LENGTH\n#define USART_SERIAL_PARITY      CONF_UART_PARITY\n#define USART_SERIAL_STOP_BIT    CONF_UART_STOP_BITS\n\n#define PINS_USART0_PIO  PIOA\n#define PINS_USART0_ID   USART_SERIAL_ID\n#define PINS_USART0_TYPE PIO_PERIPH_A\n#define PINS_USART0_ATTR PIO_DEFAULT\n#define PINS_USART0_MASK (PIO_PA5A_RXD0 | PIO_PA6A_TXD0)\n\n#endif /* CONF_USART_SERIAL_H_INCLUDED */\n"})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include "conf_uart_serial.h"\n\n#include <asf.h>\n\nvoid serial_init(void) {\n    pio_configure(\n        PINS_USART0_PIO, PINS_USART0_TYPE, PINS_USART0_MASK, PINS_USART0_ATTR);\n    pmc_enable_periph_clk(USART_SERIAL_ID);\n    sysclk_enable_peripheral_clock(USART_SERIAL_ID);\n\n    const usart_serial_options_t usart_serial_options\n        = {.baudrate   = USART_SERIAL_BAUDRATE,\n           .charlength = USART_SERIAL_CHAR_LENGTH,\n           .paritytype = USART_SERIAL_PARITY,\n           .stopbits   = USART_SERIAL_STOP_BIT};\n\n    stdio_serial_init(USART_SERIAL, &usart_serial_options);\n}\n\nint main(void) {\n    sysclk_init();\n    board_init();\n    /* Insert application code here, after the board has been initialized. */\n    wdt_disable(WDT);\n\n    serial_init();\n\n    for(;;) {\n        uint16_t temp;\n        scanf("%d", &temp);\n        printf("%d\\r\\n", temp);\n    }\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);