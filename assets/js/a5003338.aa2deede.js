"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[60662],{28453:(n,e,c)=>{c.d(e,{R:()=>t,x:()=>r});var i=c(96540);const d={},a=i.createContext(d);function t(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(d):n.components||d:t(n.components),i.createElement(a.Provider,{value:e},n.children)}},80159:(n,e,c)=>{c.r(e),c.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>C,frontMatter:()=>r,metadata:()=>i,toc:()=>s});const i=JSON.parse('{"id":"mcu/infineon/tricore-tc27d-vadc","title":"TriCore TC27D VADC(Versatile ADC)","description":"TriCore TC27D VADC(Versatile ADC)","source":"@site/docs/mcu/infineon/tricore-tc27d-vadc.mdx","sourceDirName":"mcu/infineon","slug":"/mcu/infineon/tricore-tc27d-vadc","permalink":"/docs/mcu/infineon/tricore-tc27d-vadc","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/mcu/infineon/tricore-tc27d-vadc.mdx","tags":[],"version":"current","lastUpdatedAt":1743270018000,"frontMatter":{"id":"tricore-tc27d-vadc","title":"TriCore TC27D VADC(Versatile ADC)","sidebar_label":"TC27D VADC(Versatile ADC)","description":"TriCore TC27D VADC(Versatile ADC)","keywords":["Infineon","TriCore","TC275","ADC"]},"sidebar":"infineon","previous":{"title":"TC27D terminal","permalink":"/docs/mcu/infineon/tricore-tc27d-terminal"}}');var d=c(74848),a=c(28453),t=c(86025);const r={id:"tricore-tc27d-vadc",title:"TriCore TC27D VADC(Versatile ADC)",sidebar_label:"TC27D VADC(Versatile ADC)",description:"TriCore TC27D VADC(Versatile ADC)",keywords:["Infineon","TriCore","TC275","ADC"]},o=void 0,l={},s=[{value:"Related header",id:"related-header",level:2},{value:"IfxVadc_Adc.h",id:"ifxvadc_adch",level:2},{value:"Examples",id:"examples",level:2},{value:"Background",id:"background",level:3}];function u(n){const e={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(e.p,{children:"HW: ShieldBuddy TC275"}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"Queue"}),": Highest priority"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"Scan"}),":"]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.strong,{children:"Background"}),": Lowest priority"]}),"\n"]}),"\n",(0,d.jsx)("center",{children:(0,d.jsx)("img",{src:(0,t.Ay)("img/mcu/infineon/vadc-priority.png")})}),"\n",(0,d.jsx)(e.h2,{id:"related-header",children:"Related header"}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"IfxVadc_cfg.h"}),": VADC on-chip implementation data."]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"IfxVadc_PinMap.h"}),": VADC I/O map."]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"IfxVadc_Adc.h"}),": VADC ADC details."]}),"\n",(0,d.jsxs)(e.li,{children:[(0,d.jsx)(e.code,{children:"IfxVadc.h"}),": VADC basic functionality."]}),"\n"]}),"\n",(0,d.jsx)(e.h2,{id:"ifxvadc_adch",children:"IfxVadc_Adc.h"}),"\n",(0,d.jsxs)(e.blockquote,{children:["\n",(0,d.jsx)(e.p,{children:"VADC comprises of independent analog channels with Analog/Digital converters to convert analog input to discrete digital output."}),"\n"]}),"\n",(0,d.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,d.jsx)(e.h3,{id:"background",children:"Background"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-c",children:'#include "IfxCpu.h"\n#include "IfxScuWdt.h"\n#include "IfxVadc_Adc.h"\n#include "Ifx_Types.h"\n\nIfxCpu_syncEvent cpuSyncEvent = 0;\n\n// VADC handle\nIfxVadc_Adc       vadc;\nIfxVadc_Adc_Group adcGroup;\n\nint core0_main(void) {\n    IfxCpu_enableInterrupts();\n    /*\n     * !!WATCHDOG0 AND SAFETY WATCHDOG ARE DISABLED HERE!!\n     * Enable the watchdog in the demo if it is required and also service the\n     * watchdog periodically\n     * */\n    IfxScuWdt_disableCpuWatchdog(IfxScuWdt_getCpuWatchdogPassword());\n    IfxScuWdt_disableSafetyWatchdog(IfxScuWdt_getSafetyWatchdogPassword());\n\n    /* Cpu sync event wait*/\n    IfxCpu_emitEvent(&cpuSyncEvent);\n    IfxCpu_waitEvent(&cpuSyncEvent, 1);\n\n    IfxVadc_Adc_Config adcConfig;\n    IfxVadc_Adc_initModuleConfig(&adcConfig, &MODULE_VADC);\n    IfxVadc_Adc_initModule(&vadc, &adcConfig);\n    IfxVadc_Adc_GroupConfig adcGroupConfig;\n    IfxVadc_Adc_initGroupConfig(&adcGroupConfig, &vadc);\n    // group 0\n    adcGroupConfig.groupId = IfxVadc_GroupId_0;\n    adcGroupConfig.master  = adcGroupConfig.groupId;\n    adcGroupConfig.arbiter.requestSlotBackgroundScanEnabled        = TRUE;\n    adcGroupConfig.backgroundScanRequest.autoBackgroundScanEnabled = TRUE;\n    adcGroupConfig.backgroundScanRequest.triggerConfig.gatingMode\n        = IfxVadc_GatingMode_always;\n    IfxVadc_Adc_initGroup(&adcGroup, &adcGroupConfig);\n\n    IfxVadc_Adc_ChannelConfig adcChannelConfig;\n    IfxVadc_Adc_Channel       adcChannel;\n    IfxVadc_Adc_initChannelConfig(&adcChannelConfig, &adcGroup);\n\n    // channel 0\n    adcChannelConfig.channelId         = (IfxVadc_ChannelId)(0);\n    adcChannelConfig.resultRegister    = (IfxVadc_ChannelResult)(0);\n    adcChannelConfig.backgroundChannel = TRUE;\n    IfxVadc_Adc_initChannel(&adcChannel, &adcChannelConfig);\n\n    // add to background scan\n    unsigned channels = (1 << adcChannelConfig.channelId);\n    unsigned mask     = channels;\n    IfxVadc_Adc_setBackgroundScan(&vadc, &adcGroup, channels, mask);\n\n    IfxVadc_Adc_startBackgroundScan(&vadc);\n\n    while(1) {\n        // wait for valid result\n        Ifx_VADC_RES conversionResult;\n        do {\n            conversionResult = IfxVadc_Adc_getResult(&adcChannel);\n        } while(! conversionResult.B.VF);\n\n        uint32 actual = conversionResult.B.RESULT;\n        // print\n    }\n\n    return 1;\n}\n'})}),"\n",(0,d.jsx)("center",{children:(0,d.jsx)("img",{src:(0,t.Ay)("img/mcu/infineon/vadc-read-and-plot.png")})})]})}function C(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,d.jsx)(e,{...n,children:(0,d.jsx)(u,{...n})}):u(n)}}}]);