"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[76043],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(96540);const s={},l=i.createContext(s);function r(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(l.Provider,{value:n},e.children)}},71813:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"linux/linux-kernel/linux-kernel-how-to-contribute","title":"How to contribute to Linux kernel","description":"How to contribute to Linux kernel","source":"@site/docs/linux/linux-kernel/linux-kernel-how-to-contribute.mdx","sourceDirName":"linux/linux-kernel","slug":"/linux/linux-kernel/linux-kernel-how-to-contribute","permalink":"/docs/linux/linux-kernel/linux-kernel-how-to-contribute","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/linux/linux-kernel/linux-kernel-how-to-contribute.mdx","tags":[],"version":"current","lastUpdatedAt":1741888030000,"frontMatter":{"id":"linux-kernel-how-to-contribute","title":"How to contribute to Linux kernel","sidebar_label":"How to contribute","description":"How to contribute to Linux kernel","keywords":["kernel","contribute"]},"sidebar":"linux-kernel","previous":{"title":"ftrace","permalink":"/docs/linux/linux-kernel/linux-kernel-ftrace"},"next":{"title":"Null-modem emulator tty0uart","permalink":"/docs/linux/linux-kernel/linux-kernel-tty0uart"}}');var s=t(74848),l=t(28453);const r={id:"linux-kernel-how-to-contribute",title:"How to contribute to Linux kernel",sidebar_label:"How to contribute",description:"How to contribute to Linux kernel",keywords:["kernel","contribute"]},a=void 0,o={},c=[{value:"Write commit message",id:"write-commit-message",level:2},{value:"Make patch",id:"make-patch",level:2},{value:"Set mutt",id:"set-mutt",level:2},{value:"Send patch mail",id:"send-patch-mail",level:2},{value:"Get maintainer",id:"get-maintainer",level:3},{value:"Send patch using mutt",id:"send-patch-using-mutt",level:3},{value:"Reply to comments",id:"reply-to-comments",level:2},{value:"Example",id:"example",level:3}];function m(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"write-commit-message",children:"Write commit message"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"title\n\ndetails\n\nSigned-off-by: Hyeonki Hong <hhk7734@gmail.com>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"make-patch",children:"Make patch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"git format-patch [-<num of commit>] [commit]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"./scripts/checkpatch.pl <patch_file>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"set-mutt",children:"Set mutt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",metastring:'title=".muttrc"',children:'unset use_domain\nset realname = "Hyeonki Hong"\nset from = "hhk7734@gmail.com"\nset use_from = yes\n\nset imap_user = "hhk7734@gmail.com"\nset imap_pass = "<app password>"\nset spoolfile = imaps://imap.gmail.com/INBOX\nset folder = imaps://imap.gmail.com/\nset record="imaps://imap.gmail.com/[Gmail]/Sent Mail"\nset postponed="imaps://imap.gmail.com/[Gmail]/Drafts"\nset mbox="imaps://imap.gmail.com/[Gmail]/All Mail"\n\nset smtp_url = "smtp://hhk7734@smtp.gmail.com:587/"\nset smtp_pass = $imap_pass\nset ssl_force_tls = yes\n\nset editor = "vim"\nset edit_headers = yes\nset charset = UTF-8\n'})}),"\n",(0,s.jsx)(n.h2,{id:"send-patch-mail",children:"Send patch mail"}),"\n",(0,s.jsx)(n.h3,{id:"get-maintainer",children:"Get maintainer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"./scripts/get_maintainer.pl <patch_file>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"send-patch-using-mutt",children:"Send patch using mutt"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mutt -H <patch_file>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-txt",children:"To: <maintainer>, <maintainer>, ...\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-txt",children:"Cc: <open list>, ...\n"})}),"\n",(0,s.jsx)(n.h2,{id:"reply-to-comments",children:"Reply to comments"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"mutt\n"})}),"\n",(0,s.jsx)(n.p,{children:"Reply, including the message you received."}),"\n",(0,s.jsx)(n.p,{children:"Write the answer inline or at the end of the included message."}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:'From: Hyeonki Hong <hhk7734@gmail.com>\nDate: Thu, Jun 11, 2020 at 2:40 PM\nSubject: [PATCH] pinctrl: meson: fix drive strength register and bit\ncalculation\nTo: Jerome Brunet <jbrunet@baylibre.com>, Linus Walleij <linus.walleij@linaro.org>, <khilman@baylibre.com>\nCc: <linux-gpio@vger.kernel.org>, <linux-kernel@vger.kernel.org>, <linux-arm-kernel@lists.infradead.org>, <linux-amlogic@lists.infradead.org>\n\nOn Wed, Jun 10, 2020 at 03:09:42PM +0200, Jerome Brunet wrote:\n\n> On Wed 10 Jun 2020 at 06:13, hhk7734@gmail.com wrote:\n>\n> > From: Hyeonki Hong <hhk7734@gmail.com>\n> >\n> > If a GPIO bank has greater than 16 pins, PAD_DS_REG is split into two\n> > registers. However, when register and bit were calculated, the first\n> > register defined in the bank was used, and the bit was calculated based\n> > on the first pin. This causes problems in setting the driving strength.\n> >\n> > Solved the problem by changing the bit using a mask and selecting the\n> > next register when the bit exceeds 15.\n>\n> This fixes the case of GPIOX on g12 which goes up to 18 yes but the same\n> problem will happen again a if bank ever goes past 31 pins. In such case\n> the problem would apply to all reg types.\n>\n> I would prefer if it was solved in a more generic fashion, like defining\n> a "stride" table with the values of each reg type. This table can common\n> to all aml SoCs for now but eventually it probably need to be SoC\n> specific.\n>\n> This would allow to :\n> A) handle the case you are reporting in a generic (future proof) way\n> B) remove the weird "bit = bit << 1;" calc in place in the get/set of\n> the drive strengh pinconf\n\nIf all amlogic SoC has same register style, I think the code below is fine.\n\nstatic const unsigned int meson_bit_strides[] = {\n0, 0, 0, 0, 0, 1, 0\n};\n\nstatic void meson_calc_reg_and_bit(struct meson_bank *bank, unsigned int pin,\nenum meson_reg_type reg_type,\nunsigned int *reg, unsigned int *bit)\n{\nstruct meson_reg_desc *desc = &bank->regs[reg_type];\n\n        *bit = (desc->bit + pin - bank->first) << meson_bit_strides[reg_type];\n        *reg = (desc->reg + (*bit / 32)) * 4;\n        *bit &= 0x1f;\n\n}\n\nHow about this?\n\n> > ## Signed-off-by: Hyeonki Hong <hhk7734@gmail.com>\n> >\n> > drivers/pinctrl/meson/pinctrl-meson.c | 7 +++++++\n> > 1 file changed, 7 insertions(+)\n> >\n> > diff --git a/drivers/pinctrl/meson/pinctrl-meson.c b/drivers/pinctrl/meson/pinctrl-meson.c\n> > index bbc919bef2bf..ef66239b7df5 100644\n> > --- a/drivers/pinctrl/meson/pinctrl-meson.c\n> > +++ b/drivers/pinctrl/meson/pinctrl-meson.c\n> > @@ -98,6 +98,13 @@ static void meson_calc_reg_and_bit(struct meson_bank \\*bank, unsigned int pin,\n> >\n> >     *reg = desc->reg * 4;\n> >     *bit = desc->bit + pin - bank->first;\n> >\n> > -\n> > - if (reg_type == REG_DS) {\n> > -           if (*bit > 15) {\n> > -                   *bit &= 0xf;\n> > -                   *reg += 4;\n> > -           }\n> > - }\n> >   }\n> >\n> > static int meson_get_groups_count(struct pinctrl_dev \\*pcdev)\n'})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);