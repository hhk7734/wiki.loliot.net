"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[58451],{28038:(e,n,_)=>{_.r(n),_.d(n,{assets:()=>R,contentTitle:()=>s,default:()=>l,frontMatter:()=>t,metadata:()=>r,toc:()=>A});const r=JSON.parse('{"id":"mcu/sam/sam-sam4s2a-usart","title":"SAM4S2A USART","description":"SAM4S2A USART","source":"@site/docs/mcu/sam/sam-sam4s2a-usart.mdx","sourceDirName":"mcu/sam","slug":"/mcu/sam/sam-sam4s2a-usart","permalink":"/docs/mcu/sam/sam-sam4s2a-usart","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/mcu/sam/sam-sam4s2a-usart.mdx","tags":[],"version":"current","lastUpdatedAt":1745080102000,"frontMatter":{"id":"sam-sam4s2a-usart","title":"SAM4S2A USART","sidebar_label":"USART","description":"SAM4S2A USART","keywords":["SAM","USART"]},"sidebar":"sam","previous":{"title":"Set F_CPU","permalink":"/docs/mcu/sam/sam-sam4s2a-fcpu"},"next":{"title":"stdio","permalink":"/docs/mcu/sam/sam-sam4s2a-stdio"}}');var a=_(74848),i=_(28453);const t={id:"sam-sam4s2a-usart",title:"SAM4S2A USART",sidebar_label:"USART",description:"SAM4S2A USART",keywords:["SAM","USART"]},s=void 0,R={},A=[{value:"ASF Wizard",id:"asf-wizard",level:2},{value:"src\\config\\conf_board.h",id:"srcconfigconf_boardh",level:2},{value:"src\\config\\conf_uart_serial.h",id:"srcconfigconf_uart_serialh",level:2},{value:"Examples",id:"examples",level:2}];function S(e){const n={code:"code",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"asf-wizard",children:"ASF Wizard"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"USART - Serial interface (service): Common API which abstracts the user from directly accessing the register and provides a generic serial interface using USART."}),"\n",(0,a.jsx)(n.li,{children:"PIO - Parallel Input/Output Controller (driver): The Parallel Input/Output Controller manages up to 32 fully programmable input/output lines. Each I/O line may be dedicated as a general-purpose I/O or be assigned to a function of an embedded peripheral. This assures effective optimization of the pins of a product."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"srcconfigconf_boardh",children:"src\\config\\conf_board.h"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"#ifndef CONF_BOARD_H\n#define CONF_BOARD_H\n\n#define CONSOLE_UART (Usart *)USART0\n\n/** Enable Com Port. */\n#define CONF_BOARD_UART_CONSOLE\n\n#endif    // CONF_BOARD_H\n"})}),"\n",(0,a.jsx)(n.h2,{id:"srcconfigconf_uart_serialh",children:"src\\config\\conf_uart_serial.h"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"#ifndef CONF_USART_SERIAL_H\n#define CONF_USART_SERIAL_H\n\n/* A reference setting for USART */\n/** USART Interface */\n#define CONF_UART CONSOLE_UART\n/** Baudrate setting */\n#define CONF_UART_BAUDRATE 115200\n/** Character length setting */\n#define CONF_UART_CHAR_LENGTH US_MR_CHRL_8_BIT\n/** Parity setting */\n#define CONF_UART_PARITY US_MR_PAR_NO\n/** Stop bits setting */\n#define CONF_UART_STOP_BITS US_MR_NBSTOP_1_BIT\n\n#define USART_SERIAL                CONF_UART\n#define USART_SERIAL_ID             ID_USART0\n#define USART_SERIAL_BAUDRATE       CONF_UART_BAUDRATE\n#define USART_SERIAL_CHAR_LENGTH    CONF_UART_CHAR_LENGTH\n#define USART_SERIAL_PARITY         CONF_UART_PARITY\n#define USART_SERIAL_STOP_BIT       CONF_UART_STOP_BITS\n#define USART_SERIAL_IRQ            USART0_IRQn\n#define USART_SERIAL_ISR_HANDLER    USART0_Handler\n#define USART_SERIAL_RX_BUFFER_SIZE 128\n#define USART_SERIAL_TX_BUFFER_SIZE 128\n\n#define PINS_USART0_PIO  PIOA\n#define PINS_USART0_ID   USART_SERIAL_ID\n#define PINS_USART0_TYPE PIO_PERIPH_A\n#define PINS_USART0_ATTR PIO_DEFAULT\n#define PINS_USART0_MASK (PIO_PA5A_RXD0 | PIO_PA6A_TXD0)\n\n#endif /* CONF_USART_SERIAL_H_INCLUDED */\n"})}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:'#include "conf_uart_serial.h"\n\n#include <asf.h>\n\nvolatile uint8_t  rx_buffer[USART_SERIAL_RX_BUFFER_SIZE];\nvolatile uint16_t rx_buffer_tail = 0;\nvolatile uint16_t rx_buffer_head = 0;\n\nvoid serial_init(void) {\n    pio_configure(\n        PINS_USART0_PIO, PINS_USART0_TYPE, PINS_USART0_MASK, PINS_USART0_ATTR);\n    pmc_enable_periph_clk(USART_SERIAL_ID);\n    sysclk_enable_peripheral_clock(USART_SERIAL_ID);\n\n    const sam_usart_opt_t usart_console_settings\n        = {.baudrate     = USART_SERIAL_BAUDRATE,\n           .char_length  = USART_SERIAL_CHAR_LENGTH,\n           .parity_type  = USART_SERIAL_PARITY,\n           .stop_bits    = USART_SERIAL_STOP_BIT,\n           .channel_mode = US_MR_CHMODE_NORMAL};\n    usart_init_rs232(USART_SERIAL, &usart_console_settings, F_CPU);\n    usart_enable_tx(USART_SERIAL);\n    usart_enable_rx(USART_SERIAL);\n\n    usart_enable_interrupt(USART_SERIAL, US_IER_RXRDY);\n    NVIC_EnableIRQ(USART_SERIAL_IRQ);\n}\n\nuint16_t serial_available(void) {\n    return (USART_SERIAL_RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail)\n           % USART_SERIAL_RX_BUFFER_SIZE;\n}\n\nchar serial_read(void) {\n    if(rx_buffer_head == rx_buffer_tail) return 0;\n    else {\n        uint8_t temp   = rx_buffer[rx_buffer_tail];\n        rx_buffer_tail = (rx_buffer_tail + 1) % USART_SERIAL_RX_BUFFER_SIZE;\n        return temp;\n    }\n}\n\nint main(void) {\n    sysclk_init();\n    board_init();\n    /* Insert application code here, after the board has been initialized. */\n    wdt_disable(WDT);\n\n    serial_init();\n\n    for(;;) {\n        if(serial_available()) { usart_write(USART_SERIAL, serial_read()); }\n    }\n}\n\nISR(USART_SERIAL_ISR_HANDLER) {\n    if(usart_is_rx_ready(USART_SERIAL)) {\n        usart_read(USART_SERIAL, &rx_buffer[rx_buffer_head]);\n        rx_buffer_head = (rx_buffer_head + 1) % USART_SERIAL_RX_BUFFER_SIZE;\n        if(rx_buffer_head == rx_buffer_tail) {\n            rx_buffer_tail = (rx_buffer_tail + 1) % USART_SERIAL_RX_BUFFER_SIZE;\n        }\n    }\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(S,{...e})}):S(e)}},28453:(e,n,_)=>{_.d(n,{R:()=>t,x:()=>s});var r=_(96540);const a={},i=r.createContext(a);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);