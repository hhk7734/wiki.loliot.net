"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[96358],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(96540);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}},79526:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"mlops/network/istio/traffic-management/gateway","title":"Gateway API\ub85c \ub77c\uc6b0\ud305 \uad00\ub9ac\ud558\uae30","description":"Gateway API\ub85c \ub77c\uc6b0\ud305 \uad00\ub9ac\ud558\uae30","source":"@site/docs/mlops/network/istio/traffic-management/gateway.mdx","sourceDirName":"mlops/network/istio/traffic-management","slug":"/mlops/network/istio/traffic-management/gateway","permalink":"/docs/mlops/network/istio/traffic-management/gateway","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/mlops/network/istio/traffic-management/gateway.mdx","tags":[],"version":"current","lastUpdatedAt":1754575588000,"frontMatter":{"id":"gateway","title":"Gateway API\ub85c \ub77c\uc6b0\ud305 \uad00\ub9ac\ud558\uae30","sidebar_label":"\ub77c\uc6b0\ud305 \uad00\ub9ac\ud558\uae30","description":"Gateway API\ub85c \ub77c\uc6b0\ud305 \uad00\ub9ac\ud558\uae30","keywords":["gateway","istio"]},"sidebar":"network","previous":{"title":"Upgrade","permalink":"/docs/mlops/network/istio/upgrade"},"next":{"title":"VirtualService","permalink":"/docs/mlops/network/istio/traffic-management/virtual-service"}}');var i=t(74848),o=t(28453);const s={id:"gateway",title:"Gateway API\ub85c \ub77c\uc6b0\ud305 \uad00\ub9ac\ud558\uae30",sidebar_label:"\ub77c\uc6b0\ud305 \uad00\ub9ac\ud558\uae30",description:"Gateway API\ub85c \ub77c\uc6b0\ud305 \uad00\ub9ac\ud558\uae30",keywords:["gateway","istio"]},r=void 0,c={},l=[{value:"Gateway",id:"gateway",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"gateway",children:"Gateway"}),"\n",(0,i.jsx)(n.admonition,{title:"Reference",type:"info",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/mlops/kubernetes/network/gateway-api/route#gateway",children:"Gateway API\ub85c \ub77c\uc6b0\ud305 \uad00\ub9ac\ud558\uae30 # Gateway"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://istio.io/latest/docs/tasks/traffic-management/ingress/gateway-api/#automated-deployment",children:"Istio / Kubernetes Gateway API # Automated deployment"})}),"\n"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: ingress-infrastructure\n  namespace: istio-system\ndata:\n  service: |\n    spec:\n      type: LoadBalancer\n      externalTrafficPolicy: "Local"\n\n  # serviceAccount: |\n\n  deployment: |\n    spec:\n      replicas: 3\n      template:\n        spec:\n          containers:\n            - name: istio-proxy\n              resources:\n                requests:\n                  cpu: 500m\n                  memory: 512Mi\n                limits:\n                  cpu: "2"\n                  memory: 1Gi\n          affinity:\n            nodeAffinity:\n              requiredDuringSchedulingIgnoredDuringExecution:\n                nodeSelectorTerms:\n                  - matchExpressions:\n                      - key: topology.kubernetes.io/zone\n                        operator: In\n                        values:\n                          - ap-northeast-2a\n                          - ap-northeast-2c\n            podAntiAffinity:\n              preferredDuringSchedulingIgnoredDuringExecution:\n                - weight: 50\n                  podAffinityTerm:\n                    topologyKey: kubernetes.io/hostname\n                    labelSelector:\n                      matchExpressions: []\n                    matchLabelKeys:\n                      - gateway.networking.k8s.io/gateway-name\n                      - pod-template-hash\n\n  horizontalPodAutoscaler: |\n    spec:\n      minReplicas: 3\n      maxReplicas: 5\n\n  podDisruptionBudget: |\n    spec:\n      minAvailable: 1\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'apiVersion: gateway.networking.k8s.io/v1\nkind: Gateway\nmetadata:\n  name: ingress\n  namespace: istio-system\nspec:\n  gatewayClassName: istio\n  infrastructure:\n    parametersRef:\n      group: ""\n      kind: ConfigMap\n      name: ingress-infrastructure\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}}}]);