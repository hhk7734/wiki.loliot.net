"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[42116],{28453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>s});var l=i(96540);const r={},t=l.createContext(r);function c(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),l.createElement(t.Provider,{value:n},e.children)}},40879:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>_,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"mcu/infineon/tricore-tc27d-terminal","title":"TriCore TC27D terminal","description":"TriCore TC27D terminal","source":"@site/docs/mcu/infineon/tricore-tc27d-terminal.mdx","sourceDirName":"mcu/infineon","slug":"/mcu/infineon/tricore-tc27d-terminal","permalink":"/docs/mcu/infineon/tricore-tc27d-terminal","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/mcu/infineon/tricore-tc27d-terminal.mdx","tags":[],"version":"current","lastUpdatedAt":1743437321000,"frontMatter":{"id":"tricore-tc27d-terminal","title":"TriCore TC27D terminal","sidebar_label":"TC27D terminal","description":"TriCore TC27D terminal","keywords":["Infineon","TriCore","TC275","terminal"]},"sidebar":"infineon","previous":{"title":"TC27D ASC(UART)","permalink":"/docs/mcu/infineon/tricore-tc27d-asc"},"next":{"title":"TC27D VADC(Versatile ADC)","permalink":"/docs/mcu/infineon/tricore-tc27d-vadc"}}');var r=i(74848),t=i(28453);const c={id:"tricore-tc27d-terminal",title:"TriCore TC27D terminal",sidebar_label:"TC27D terminal",description:"TriCore TC27D terminal",keywords:["Infineon","TriCore","TC275","terminal"]},s=void 0,_={},o=[{value:"Related header",id:"related-header",level:2},{value:"Ifx_Shell_Command",id:"ifx_shell_command",level:2},{value:"Examples",id:"examples",level:2},{value:"0_Src/AppSw/Tricore/TC27D_lib/shell_interface/shell_interface.h",id:"0_srcappswtricoretc27d_libshell_interfaceshell_interfaceh",level:3},{value:"0_Src/AppSw/Tricore/TC27D_lib/shell_interface/shell_interface.c",id:"0_srcappswtricoretc27d_libshell_interfaceshell_interfacec",level:3}];function a(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"HW: ShieldBuddy TC275"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"BaseFramework\uc5d0\ub294 Bsp\uac00 \uae30\ubcf8 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \uc81c\uacf5\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. BaseFramework\ub97c \ud504\ub85c\uc81d\ud2b8 \uc2dc\uc791\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 iLLD\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc544 BaseSw\ub97c \uad50\uccb4\ud574\uc8fc\uc2dc\uac70\ub098 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub9cc \ucd94\uac00\ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4."})}),"\n",(0,r.jsx)(n.h2,{id:"related-header",children:"Related header"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ifx_Shell.h"}),": Shell functions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Ifx_Console.h"}),": Main Console module."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Assert.h"}),": Assert functions."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"ifx_shell_command",children:"Ifx_Shell_Command"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"typedef boolean (*Ifx_Shell_Call)(pchar args, void *data, IfxStdIf_DPipe *io);\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"typedef struct {\n    pchar          commandLine;\n    pchar          help;\n    void *         data;\n    Ifx_Shell_Call call;\n} Ifx_Shell_Command;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"\ud3f4\ub354\ub97c \uc0c8\ub85c \uc0dd\uc131\ud55c \uacbd\uc6b0 clean projet \ud6c4, \ub2e4\uc2dc \ube4c\ub4dc\ud574\uc57c \ud569\ub2c8\ub2e4."})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"0_Src/AppSw/Tricore/TC27D_lib/Config/Ifx_IntPrioDef.h"}),"\ub97c \ub9cc\ub4e4\uace0 \uc544\ub798\uc640 \uac19\uc774 \uc791\uc131\ud569\ub2c8\ub2e4."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:"#pragma once\n\n#define IFX_INTPRIO_ASCLIN3_TX 1\n#define IFX_INTPRIO_ASCLIN3_RX 2\n#define IFX_INTPRIO_ASCLIN3_ER 3\n"})}),"\n",(0,r.jsx)(n.h3,{id:"0_srcappswtricoretc27d_libshell_interfaceshell_interfaceh",children:"0_Src/AppSw/Tricore/TC27D_lib/shell_interface/shell_interface.h"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#pragma once\n\n#include "IfxAsclin_Asc.h"\n#include "Ifx_Console.h"\n#include "Ifx_Shell.h"\n\n#define SHELL_ASC_TX_BUFFER_SIZE 2048\n#define SHELL_ASC_RX_BUFFER_SIZE 512\n\n#define SHELL_ASC_BAUDRATE 115200\n\ntypedef struct {\n    uint8 tx[SHELL_ASC_TX_BUFFER_SIZE + sizeof(Ifx_Fifo) + 8];\n    uint8 rx[SHELL_ASC_RX_BUFFER_SIZE + sizeof(Ifx_Fifo) + 8];\n} shell_asc_buffer_t;\n\ntypedef struct {\n    shell_asc_buffer_t buffer;\n    IfxAsclin_Asc      asc;\n    IfxStdIf_DPipe     dpipe;\n    Ifx_Shell          shell;\n} shell_interface_t;\n\nvoid shell_init(void);\nvoid shell_run(void);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"0_srcappswtricoretc27d_libshell_interfaceshell_interfacec",children:"0_Src/AppSw/Tricore/TC27D_lib/shell_interface/shell_interface.c"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include "Assert.h"\n#include "IfxAsclin_PinMap.h"\n#include "IfxCpu_Irq.h"\n#include "Ifx_IntPrioDef.h"\n#include "shell_interface.h"\n\nshell_interface_t shell_interface;\n\nIFX_INTERRUPT(asclin3_tx_isr, 0, IFX_INTPRIO_ASCLIN3_TX) {\n    IfxStdIf_DPipe_onTransmit(&shell_interface.dpipe);\n}\nIFX_INTERRUPT(asclin3_rx_isr, 0, IFX_INTPRIO_ASCLIN3_RX) {\n    IfxStdIf_DPipe_onReceive(&shell_interface.dpipe);\n}\nIFX_INTERRUPT(asclin3_er_isr, 0, IFX_INTPRIO_ASCLIN3_ER) {\n    IfxStdIf_DPipe_onError(&shell_interface.dpipe);\n}\n\nconst Ifx_Shell_Command shell_commands[] = {{\n                                                "help",\n                                                SHELL_HELP_DESCRIPTION_TEXT,\n                                                &shell_interface.shell,\n                                                &Ifx_Shell_showHelp,\n                                            },\n                                            IFX_SHELL_COMMAND_LIST_END};\n\nstatic void shell_asc_init(void) {\n    // create module config\n    IfxAsclin_Asc_Config ascConfig;\n    IfxAsclin_Asc_initModuleConfig(&ascConfig, &MODULE_ASCLIN3);\n\n    // set the desired baudrate\n    ascConfig.baudrate.prescaler = 1;\n    ascConfig.baudrate.baudrate\n        = SHELL_ASC_BAUDRATE;    // FDR values will be calculated in initModule\n\n    // ISR priorities and interrupt target\n    ascConfig.interrupt.txPriority = IFX_INTPRIO_ASCLIN3_TX;\n    ascConfig.interrupt.rxPriority = IFX_INTPRIO_ASCLIN3_RX;\n    ascConfig.interrupt.erPriority = IFX_INTPRIO_ASCLIN3_ER;\n    ascConfig.interrupt.typeOfService\n        = IfxCpu_Irq_getTos(IfxCpu_getCoreIndex());\n\n    // FIFO configuration\n    ascConfig.txBuffer     = shell_interface.buffer.tx;\n    ascConfig.txBufferSize = SHELL_ASC_TX_BUFFER_SIZE;\n    ascConfig.rxBuffer     = shell_interface.buffer.rx;\n    ascConfig.rxBufferSize = SHELL_ASC_RX_BUFFER_SIZE;\n\n    // pin configuration\n    const IfxAsclin_Asc_Pins pins\n        = {NULL,\n           IfxPort_InputMode_pullUp,    // CTS pin not used\n           &IfxAsclin3_RXD_P32_2_IN,\n           IfxPort_InputMode_pullUp,    // Rx pin\n           NULL,\n           IfxPort_OutputMode_pushPull,    // RTS pin not used\n           &IfxAsclin3_TX_P15_7_OUT,\n           IfxPort_OutputMode_pushPull,    // Tx pin\n           IfxPort_PadDriver_cmosAutomotiveSpeed1};\n    ascConfig.pins = &pins;\n    IfxAsclin_Asc_initModule(&shell_interface.asc, &ascConfig);\n}\n\nvoid shell_init(void) {\n    shell_asc_init();\n\n    IfxAsclin_Asc_stdIfDPipeInit(&shell_interface.dpipe, &shell_interface.asc);\n    Ifx_Console_init(&shell_interface.dpipe);\n    Ifx_Assert_setStandardIo(&shell_interface.dpipe);\n\n    Ifx_Shell_Config shell_config;\n    Ifx_Shell_initConfig(&shell_config);\n    shell_config.standardIo     = &shell_interface.dpipe;\n    shell_config.commandList[0] = &shell_commands[0];\n\n    Ifx_Shell_init(&shell_interface.shell, &shell_config);\n\n    Ifx_Console_print(\n        "Enter \'help\' to see the available commands" ENDL IFX_CFG_SHELL_PROMPT);\n}\n\nvoid shell_run(void) { Ifx_Shell_process(&shell_interface.shell); }\n'})})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);