"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[62922],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(96540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},55777:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"mcu/sam/sam-sam4s2a-ioport","title":"SAM4S2A ioport","description":"SAM4S2A ioport","source":"@site/docs/mcu/sam/sam-sam4s2a-ioport.mdx","sourceDirName":"mcu/sam","slug":"/mcu/sam/sam-sam4s2a-ioport","permalink":"/docs/mcu/sam/sam-sam4s2a-ioport","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/mcu/sam/sam-sam4s2a-ioport.mdx","tags":[],"version":"current","lastUpdatedAt":1744567061000,"frontMatter":{"id":"sam-sam4s2a-ioport","title":"SAM4S2A ioport","sidebar_label":"ioport","description":"SAM4S2A ioport","keywords":["SAM","ioport"]},"sidebar":"sam","previous":{"title":"Time","permalink":"/docs/mcu/sam/sam-sam4s2a-time"},"next":{"title":"ADC","permalink":"/docs/mcu/sam/sam-sam4s2a-adc"}}');var t=i(74848),o=i(28453);const r={id:"sam-sam4s2a-ioport",title:"SAM4S2A ioport",sidebar_label:"ioport",description:"SAM4S2A ioport",keywords:["SAM","ioport"]},a=void 0,l={},d=[{value:"ASF Wizard",id:"asf-wizard",level:2},{value:"Enum",id:"enum",level:2},{value:"Examples",id:"examples",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"asf-wizard",children:"ASF Wizard"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"IOPORT - General purpose I/O service (service): IOPORT - General purpose I/O driver that includes functions for various I/O operations (set direction, set/get pin value, toggle pins etc.) Common API for XMEGA, UC3 and SAM."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"enum",children:"Enum"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"/** \\brief IOPORT pin directions */\nenum ioport_direction {\n    IOPORT_DIR_INPUT,  /*!< IOPORT input direction */\n    IOPORT_DIR_OUTPUT, /*!< IOPORT output direction */\n};\n\n/** \\brief IOPORT levels */\nenum ioport_value {\n    IOPORT_PIN_LEVEL_LOW,  /*!< IOPORT pin value low */\n    IOPORT_PIN_LEVEL_HIGH, /*!< IOPORT pin value high */\n};\n\n/** \\brief IOPORT edge sense modes */\nenum ioport_sense {\n    IOPORT_SENSE_BOTHEDGES,  /*!< IOPORT sense both rising and falling edges */\n    IOPORT_SENSE_FALLING,    /*!< IOPORT sense falling edges */\n    IOPORT_SENSE_RISING,     /*!< IOPORT sense rising edges */\n    IOPORT_SENSE_LEVEL_LOW,  /*!< IOPORT sense low level  */\n    IOPORT_SENSE_LEVEL_HIGH, /*!< IOPORT sense High level  */\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"#include <asf.h>\n\n#define MY_LED IOPORT_CREATE_PIN(PIOA, 10)\n\nint main(void) {\n    sysclk_init();\n    board_init();\n    /* Insert application code here, after the board has been initialized. */\n    wdt_disable(WDT);\n\n    delay_init(F_CPU);\n\n    ioport_init();\n    ioport_set_pin_dir(MY_LED, IOPORT_DIR_OUTPUT);\n\n    for(;;) {\n        ioport_toggle_pin_level(MY_LED);\n        delay_ms(100);\n    }\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);