"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[87009],{28453:(r,e,o)=>{o.d(e,{R:()=>a,x:()=>c});var n=o(96540);const i={},t=n.createContext(i);function a(r){const e=n.useContext(t);return n.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function c(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(i):r.components||i:a(r.components),n.createElement(t.Provider,{value:e},r.children)}},50305:(r,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"mcu/arduino/arduino-platform-specification","title":"Arduino Platform specification","description":"Arduino Platform specification","source":"@site/docs/mcu/arduino/arduino-platform-specification.mdx","sourceDirName":"mcu/arduino","slug":"/mcu/arduino/arduino-platform-specification","permalink":"/docs/mcu/arduino/arduino-platform-specification","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/mcu/arduino/arduino-platform-specification.mdx","tags":[],"version":"current","lastUpdatedAt":1746033570000,"frontMatter":{"id":"arduino-platform-specification","title":"Arduino Platform specification","sidebar_label":"Platform specification","description":"Arduino Platform specification","keywords":["Arduino","hardware","platform"]},"sidebar":"arduino","next":{"title":"Library specification","permalink":"/docs/mcu/arduino/arduino-library-specification"}}');var i=o(74848),t=o(28453);const a={id:"arduino-platform-specification",title:"Arduino Platform specification",sidebar_label:"Platform specification",description:"Arduino Platform specification",keywords:["Arduino","hardware","platform"]},c=void 0,l={},p=[{value:"Hardware directory structure",id:"hardware-directory-structure",level:2},{value:"boards.txt",id:"boardstxt",level:2},{value:"platform.txt",id:"platformtxt",level:2},{value:"programmers.txt",id:"programmerstxt",level:2}];function s(r){const e={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...r.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["Ref: ",(0,i.jsx)(e.a,{href:"https://arduino.github.io/arduino-cli/platform-specification/",children:"https://arduino.github.io/arduino-cli/platform-specification/"})]}),"\n",(0,i.jsx)(e.h2,{id:"hardware-directory-structure",children:"Hardware directory structure"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-shell",children:"Arduino\n\u2514\u2500\u2500 hardware\n    \u2514\u2500\u2500 vendor/\n        \u2514\u2500\u2500 architecture/\n            \u251c\u2500\u2500 boards.txt\n            \u251c\u2500\u2500 cores/\n            \u2502\xa0\xa0 \u251c\u2500\u2500 core_1/\n            \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 abi.cpp\n            \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Arduino.h\n            \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 binary.h\n            \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 HardwareSerial.cpp\n            \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 HardwareSerial.h\n            \u2502   \u2502   \u251c\u2500\u2500 main.cpp\n            \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 ...\n            \u2502\xa0\xa0 \u251c\u2500\u2500 core_2/\n            \u2502   \u2514\u2500\u2500 ...\n            \u251c\u2500\u2500 libraries/\n            \u2502\xa0\xa0 \u251c\u2500\u2500 SPI/\n            \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 examples/\n            \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 keywords.txt\n            \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 library.properties\n            \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 src/\n            \u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 SPI.cpp\n            \u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 SPI.h\n            \u2502   \u251c\u2500\u2500 Wire/\n            \u2502\xa0\xa0 \u2514\u2500\u2500 ...\n            \u251c\u2500\u2500 platform.txt\n            \u251c\u2500\u2500 programmers.txt\n            \u2514\u2500\u2500 variants/\n                \u251c\u2500\u2500 board_1/\n                \u2502\xa0\xa0 \u2514\u2500\u2500 pins_arduino.h\n                \u251c\u2500\u2500 board_2/\n                \u2514\u2500\u2500 ...\n"})}),"\n",(0,i.jsx)(e.h2,{id:"boardstxt",children:"boards.txt"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ini",metastring:'title="boards.txt"',children:"######\n# MENU\n######\n\n# \uba54\ub274 \uc774\ub984\nmenu.menu_1=\n\n#########\n# board_1\n#########\n\n# IDE -> Tools -> Board \uc5d0 \ud45c\uc2dc\ub418\ub294 \ubcf4\ub4dc \uc774\ub984\nboard_1.name=\n# hardware/vendor/architecture/cores \uc5d0\uc11c \uc120\ud0dd\ud560 core \uc774\ub984\nboard_1.build.core=\n# hardware/vendor/architecture/variants \uc5d0\uc11c \uc120\ud0dd\ud560 variant \uc774\ub984\nboard_1.build.variant=\n# \ucef4\ud30c\uc77c \uc2dc \uc815\uc758\ub420 \ub9e4\ud06c\ub85c -DARDUINO_{build.board} (platform.txt)\nboard_1.build.board=\n# \uc5c5\ub85c\ub4dc\uc5d0 \uc0ac\uc6a9\ud560 \ud234 (platform.txt)\nboard_1.upload.tool=\n# platform.txt\uc5d0\uc11c \uc0ac\uc6a9\ud560 \ubcc0\uc218\n# board_1.xxxx= (boards.txt) -> {xxxx} (platform.txt)\nboard_1.build.extra_flags=\nboard_1.compiler.cross_compile=\n\n# \uba54\ub274 \uc120\ud0dd\uc9c0\nboard_1.menu.menu_1.option_1=\n# \uba54\ub274 \uc120\ud0dd\uc9c0\uc5d0 \ud574\ub2f9\ud558\ub294 \uc124\uc815\n# board_1.menu.menu_1.option_1.variable_1= (boards.txt) -> {variable_1} (platform.txt)\nboard_1.menu.menu_1.option_1.variable_1=\n\n#########\n# board_2\n#########\n...\n"})}),"\n",(0,i.jsx)(e.h2,{id:"platformtxt",children:"platform.txt"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ini",metastring:'title="platform.txt"',children:'# IDE -> Tools -> Board \uc5d0 \ud45c\uc2dc\ub418\ub294 \uce74\ud14c\uace0\ub9ac\nname=\n\n###################\n# compile variables\n###################\n\ncompiler.path=\n\ncompiler.S.cmd=\ncompiler.S.flags=\n\ncompiler.c.cmd=\ncompiler.c.flags=\n\ncompiler.cpp.cmd=\ncompiler.cpp.flags=\n\ncompiler.ar.cmd=\ncompiler.ar.flags=\n\ncompiler.combine.cmd=\ncompiler.combine.flags=\n\ncompiler.xxx.cmd=\ncompiler.xxx.flags=\n\n# override\n# platform.local.txt, boards.txt \ub4f1\uc5d0 \uc758\ud574 \ubc14\ub00c\ub294 \ubcc0\uc218\nbuild.extra_flags=\ncompiler.cross_compile=\ncompiler.S.extra_flags=\ncompiler.c.extra_flags=\ncompiler.cpp.extra_flags=\ncompiler.ar.extra_flags=\ncompiler.combine.extra_flags=\ncompiler.xxx.extra_flags=\n\n##################\n# compile patterns\n##################\n\n# \ub77c\uc774\ube0c\ub7ec\ub9ac \uac10\uc9c0, \ud568\uc218 \ud504\ub85c\ud1a0 \ud0c0\uc785 \uc0dd\uc131\nrecipe.preproc.macros="{compiler.path}{compiler.cross_compile}{compiler.cpp.cmd}" {compiler.cpp.flags} {preproc.macros.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{preprocessed_file_path}"\npreproc.macros.flags= -w -x c++ -E -CC\n\n# NUMBER\ub294 1 ~ 9 \ub610\ub294 01 ~ 99 \uc21c\uc11c\ub300\ub85c \uc2e4\ud589 \ub428\n# recipe.hooks.sketch.prebuild.NUMBER.pattern=\n# recipe.hooks.sketch.postbuild.NUMBER.pattern=\n# recipe.hooks.libraries.prebuild.NUMBER.pattern=\n# recipe.hooks.libraries.postbuild.NUMBER.pattern=\n# recipe.hooks.core.prebuild.NUMBER.pattern=\n# recipe.hooks.core.postbuild.NUMBER.pattern=\n# recipe.hooks.linking.prelink.NUMBER.pattern=\n# recipe.hooks.linking.postlink.NUMBER.pattern=\n# recipe.hooks.objcopy.preobjcopy.NUMBER.pattern=\n# recipe.hooks.objcopy.postobjcopy.NUMBER.pattern=\n# recipe.hooks.savehex.presavehex.NUMBER.pattern=\n# recipe.hooks.savehex.postsavehex.NUMBER.pattern=\n\n# Compile S files\nrecipe.S.o.pattern="{compiler.path}{compiler.cross_compile}{compiler.S.cmd}" {compiler.S.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"\n\n# Compile c files\nrecipe.c.o.pattern="{compiler.path}{compiler.cross_compile}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"\n\n# Compile c++ files\nrecipe.cpp.o.pattern="{compiler.path}{compiler.cross_compile}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"\n\n# Archives\nrecipe.ar.pattern="{compiler.path}{compiler.cross_compile}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"\n\n# Combine gc-sections, archives, and objects\nrecipe.c.combine.pattern="{compiler.path}{compiler.cross_compile}{compiler.combine.cmd}" {compiler.combine.flags} {compiler.combine.extra_flags} -o "{build.path}/{build.project_name}.out" {object_files} {archive_file_path} "-L{build.path}"\n\n# IDE-> Sketch -> Export compiled Binary\nrecipe.output.tmp_file={build.project_name}.out\nrecipe.output.save_file={build.project_name}.{build.variant}.out\n\n#######\n# tools\n#######\ntools.tool_1.path=\ntools.tool_1.cmd=\n\n# \ud234 pattern\uc5d0\uc11c \ubcc0\uc218 \uc0ac\uc6a9 \uc2dc tools.tool_1., params. \ub294 \ube7c\uace0 \uc0ac\uc6a9\n# e.g., {upload.verbose}\ntools.tool_1.program.params.verbose=\ntools.tool_1.program.params.quiet=\ntools.tool_1.program.pattern=\n\ntools.tool_1.upload.pattern=\ntools.tool_1.erase.pattern=\ntools.tool_1.bootloader.pattern=\n'})}),"\n",(0,i.jsx)(e.h2,{id:"programmerstxt",children:"programmers.txt"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ini",metastring:'title="programmers.txt"',children:"##############\n# programmer_1\n##############\n\n# IDE -> Tools -> Programmer \uc5d0 \ud45c\uc2dc\ub418\ub294 \ud504\ub85c\uadf8\ub798\uba38 \uc774\ub984\nprogrammer_1.name=Programmer 1\n# \uc5c5\ub85c\ub4dc\uc5d0 \uc0ac\uc6a9\ud560 \ud234 (platform.txt)\nprogrammer_1.program.tool=\nprogrammer_1.program.extra_params=\n"})})]})}function m(r={}){const{wrapper:e}={...(0,t.R)(),...r.components};return e?(0,i.jsx)(e,{...r,children:(0,i.jsx)(s,{...r})}):s(r)}}}]);