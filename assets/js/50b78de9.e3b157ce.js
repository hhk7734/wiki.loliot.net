"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[55135],{25782:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>m});const i=JSON.parse('{"id":"mcu/stm32/stm32-spi","title":"STM32 SPI","description":"STM32 SPI","source":"@site/docs/mcu/stm32/stm32-spi.mdx","sourceDirName":"mcu/stm32","slug":"/mcu/stm32/stm32-spi","permalink":"/docs/mcu/stm32/stm32-spi","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/mcu/stm32/stm32-spi.mdx","tags":[],"version":"current","lastUpdatedAt":1747248331000,"frontMatter":{"id":"stm32-spi","title":"STM32 SPI","sidebar_label":"SPI","description":"STM32 SPI","keywords":["STM32","SPI"]},"sidebar":"stm32","previous":{"title":"\ub2e4\uc591\ud55c printf() \uc0ac\uc6a9\ubc95","permalink":"/docs/mcu/stm32/stm32-printf-usage-stm32cubeide"},"next":{"title":"Low-power","permalink":"/docs/mcu/stm32/stm32-low-power-modes"}}');var a=e(74848),o=e(28453),r=e(86025);const s={id:"stm32-spi",title:"STM32 SPI",sidebar_label:"SPI",description:"STM32 SPI",keywords:["STM32","SPI"]},u=void 0,c={},m=[{value:"Pinout &amp; Configuration",id:"pinout--configuration",level:2},{value:"Function",id:"function",level:2}];function p(t){const n={code:"code",h2:"h2",pre:"pre",...(0,o.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"pinout--configuration",children:"Pinout & Configuration"}),"\n",(0,a.jsx)("center",{children:(0,a.jsx)("img",{src:(0,r.Ay)("img/mcu/stm32/stm32-spi-mode.png")})}),"\n",(0,a.jsx)(n.h2,{id:"function",children:"Function"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"/**\n  * @brief  Transmit an amount of data in blocking mode.\n  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains\n  *               the configuration information for SPI module.\n  * @param  pData pointer to data buffer\n  * @param  Size amount of data to be sent\n  * @param  Timeout Timeout duration\n  * @retval HAL status\n  */\nHAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi,\n                                   uint8_t *          pData,\n                                   uint16_t           Size,\n                                   uint32_t           Timeout);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"/**\n  * @brief  Receive an amount of data in blocking mode.\n  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains\n  *               the configuration information for SPI module.\n  * @param  pData pointer to data buffer\n  * @param  Size amount of data to be received\n  * @param  Timeout Timeout duration\n  * @retval HAL status\n  */\nHAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi,\n                                  uint8_t *          pData,\n                                  uint16_t           Size,\n                                  uint32_t           Timeout);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",children:"/**\n  * @brief  Transmit and Receive an amount of data in blocking mode.\n  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains\n  *               the configuration information for SPI module.\n  * @param  pTxData pointer to transmission data buffer\n  * @param  pRxData pointer to reception data buffer\n  * @param  Size amount of data to be sent and received\n  * @param  Timeout Timeout duration\n  * @retval HAL status\n  */\nHAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi,\n                                          uint8_t *          pTxData,\n                                          uint8_t *          pRxData,\n                                          uint16_t           Size,\n                                          uint32_t           Timeout);\n"})})]})}function d(t={}){const{wrapper:n}={...(0,o.R)(),...t.components};return n?(0,a.jsx)(n,{...t,children:(0,a.jsx)(p,{...t})}):p(t)}},28453:(t,n,e)=>{e.d(n,{R:()=>r,x:()=>s});var i=e(96540);const a={},o=i.createContext(a);function r(t){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function s(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:r(t.components),i.createElement(o.Provider,{value:n},t.children)}}}]);