"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[85762],{28453:(e,n,l)=>{l.d(n,{R:()=>s,x:()=>c});var i=l(96540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},87561:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>t});const i=JSON.parse('{"id":"lang/cpp/libraries/opencl/opencl-basics","title":"OpenCL Basics","description":"OpenCL Basics","source":"@site/docs/lang/cpp/libraries/opencl/opencl-basics.mdx","sourceDirName":"lang/cpp/libraries/opencl","slug":"/lang/cpp/libraries/opencl/opencl-basics","permalink":"/docs/lang/cpp/libraries/opencl/opencl-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/lang/cpp/libraries/opencl/opencl-basics.mdx","tags":[],"version":"current","lastUpdatedAt":1741968348000,"frontMatter":{"id":"opencl-basics","title":"OpenCL Basics","sidebar_label":"Basics","description":"OpenCL Basics","keywords":["C++","OpenCL"]},"sidebar":"cpp","previous":{"title":"C++ Exception handling","permalink":"/docs/lang/cpp/libraries/cpp-exception-handling"},"next":{"title":"OpenCL with Mali GPU","permalink":"/docs/lang/cpp/libraries/opencl/opencl-with-mali-gpu"}}');var o=l(74848),r=l(28453),s=l(86025);const c={id:"opencl-basics",title:"OpenCL Basics",sidebar_label:"Basics",description:"OpenCL Basics",keywords:["C++","OpenCL"]},a=void 0,d={},t=[{value:"Platform model",id:"platform-model",level:2},{value:"Execution model",id:"execution-model",level:2},{value:"With plaform model",id:"with-plaform-model",level:3},{value:"Context",id:"context",level:3},{value:"Command-Queues",id:"command-queues",level:3},{value:"Memory model",id:"memory-model",level:2},{value:"Hardware",id:"hardware",level:3},{value:"Software",id:"software",level:3},{value:"Programming models",id:"programming-models",level:2},{value:"OpenCL information",id:"opencl-information",level:2},{value:"clinfo installation",id:"clinfo-installation",level:3}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Ref:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.khronos.org/developers/reference-cards/",children:"https://www.khronos.org/developers/reference-cards/"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"http://developer.amd.com/wordpress/media/2013/12/AMD_OpenCL_Programming_User_Guide2.pdf",children:"http://developer.amd.com/wordpress/media/2013/12/AMD_OpenCL_Programming_User_Guide2.pdf"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"platform-model",children:"Platform model"}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)("img",{src:(0,s.Ay)("img/lang/cpp/libraries/opencl/opencl-platform-model.png")})}),"\n",(0,o.jsx)(n.h2,{id:"execution-model",children:"Execution model"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"kernel"}),": A kernel is a small unit of execution that performs a clearly defined function and that can be executed in parallel."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"work-item"}),": A instance in which one kernel run."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"work-group"}),": A group of work-items. Work-items grouped into a work-group are executed simultaneously."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"NDRagne"}),": An index space."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"OpenCL application"}),": Host program running on host + Kernels running on Compute device."]}),"\n"]}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)("img",{src:(0,s.Ay)("img/lang/cpp/libraries/opencl/opencl-ndrange.png")})}),"\n",(0,o.jsx)(n.p,{children:"In the global NDRange index space, work-item has a unique coordinate(global ID), and work-group has a work-group ID. In a local work-group index space, work-item has a unique coordinate(local ID)."}),"\n",(0,o.jsx)(n.p,{children:"Therefore, one work-item can be accessed by global ID or work-group ID + local ID."}),"\n",(0,o.jsx)(n.h3,{id:"with-plaform-model",children:"With plaform model"}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)("img",{src:(0,s.Ay)("img/lang/cpp/libraries/opencl/opencl-execution-model.png")})}),"\n",(0,o.jsx)(n.h3,{id:"context",children:"Context"}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)("img",{src:(0,s.Ay)("img/lang/cpp/libraries/opencl/opencl-context.png")})}),"\n",(0,o.jsx)(n.h3,{id:"command-queues",children:"Command-Queues"}),"\n",(0,o.jsx)(n.p,{children:"Interaction between a host and an OpenCL device is caused by commands. The host uses command-queue to transmit commands to the device."}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)("img",{src:(0,s.Ay)("img/lang/cpp/libraries/opencl/opencl-queue.jpg")})}),"\n",(0,o.jsx)(n.h2,{id:"memory-model",children:"Memory model"}),"\n",(0,o.jsx)(n.h3,{id:"hardware",children:"Hardware"}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)("img",{src:(0,s.Ay)("img/lang/cpp/libraries/opencl/opencl-memory-model.png")})}),"\n",(0,o.jsx)(n.h3,{id:"software",children:"Software"}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)("img",{src:(0,s.Ay)("img/lang/cpp/libraries/opencl/opencl-software-memory-model.png")})}),"\n",(0,o.jsx)(n.h2,{id:"programming-models",children:"Programming models"}),"\n",(0,o.jsx)(n.h2,{id:"opencl-information",children:"OpenCL information"}),"\n",(0,o.jsx)(n.h3,{id:"clinfo-installation",children:"clinfo installation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"sudo apt install -y clinfo ocl-icd-libopencl1\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"sudo mkdir -p /etc/OpenCL/vendors\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",metastring:"{1}",children:"$ sudo vim /etc/OpenCL/vendors/<vendor>.icd\n<path>/libOpenCL.so\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-shell",children:"clinfo\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);