"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[95783],{5705:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"lang/python/libraries/concurrent-futures","title":"Python concurrent.futures","description":"Python concurrent.futures","source":"@site/docs/lang/python/libraries/concurrent-futures.mdx","sourceDirName":"lang/python/libraries","slug":"/lang/python/libraries/concurrent-futures","permalink":"/docs/lang/python/libraries/concurrent-futures","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/lang/python/libraries/concurrent-futures.mdx","tags":[],"version":"current","lastUpdatedAt":1746964508000,"frontMatter":{"id":"concurrent-futures","title":"Python concurrent.futures","sidebar_label":"concurrent.futures","description":"Python concurrent.futures","keywords":["Python","concurrent.futures"]},"sidebar":"python","previous":{"title":"Convert bytes to ctypes.Structure","permalink":"/docs/lang/python/libraries/ctypes/python-ctypes-convert-bytes-structure"},"next":{"title":"About","permalink":"/docs/lang/python/libraries/gpiod/python-gpiod-about"}}');var o=t(74848),s=t(28453);const i={id:"concurrent-futures",title:"Python concurrent.futures",sidebar_label:"concurrent.futures",description:"Python concurrent.futures",keywords:["Python","concurrent.futures"]},c=void 0,u={},l=[{value:"ProcessPoolExecutor",id:"processpoolexecutor",level:2},{value:"ProcessPoolExecutor with asyncio",id:"processpoolexecutor-with-asyncio",level:2},{value:"\uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c signal \ud578\ub4e4\ub9c1",id:"\uc790\uc2dd-\ud504\ub85c\uc138\uc2a4\uc5d0\uc11c-signal-\ud578\ub4e4\ub9c1",level:2}];function a(n){const e={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"processpoolexecutor",children:"ProcessPoolExecutor"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'import os\nimport time\nfrom concurrent.futures import ProcessPoolExecutor, as_completed\n\n\ndef task(index: int) -> int:\n    print(f"task {index} start in {os.getpid()}")\n\n    if index % 3 == 0:\n        raise RuntimeError(f"task {index} error")\n\n    time.sleep(3 - index % 3)\n\n    return index\n\n\nwith ProcessPoolExecutor(max_workers=3) as executor:\n    # Non-blocking\n    # pool \ud06c\uae30\uc5d0 \uc0c1\uad00 \uc5c6\uc774 \uc791\uc5c5 \uc790\uccb4\ub294 \ubc14\ub85c \uc81c\ucd9c \ub428\n    futures = [executor.submit(task, *args) for args in [(i,) for i in range(10)]]\n    print("submit done")\n\n    # \uc644\ub8cc\ub41c \uc791\uc5c5\uc744 \uac00\uc838\uc634\n    for future in as_completed(futures):\n        try:\n            # \uc5d0\ub7ec \uc5c6\uc774 task\uac00 \uc644\ub8cc\ub418\uc5c8\uc744 \ub54c \uacb0\uacfc\ub97c \uac00\uc838\uc634\n            result = future.result()\n            print(f"task {result} done")\n        except BaseException as e:\n            # task\ub97c \uc2e4\ud589\ud558\ub294 \ub3c4\uc911 \ubc1c\uc0dd\ud55c \uc5d0\ub7ec \ucc98\ub9ac\n            print(f"exception: {e}")\n'})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'import os\nimport time\nfrom concurrent.futures import Future, ProcessPoolExecutor, wait\n\n\ndef task(index: int) -> int:\n    print(f"task {index} start in {os.getpid()}")\n\n    if index % 3 == 0:\n        raise RuntimeError(f"task {index} error")\n\n    time.sleep(3 - index % 3)\n\n    return index\n\n\ndef callback(fut: Future[int]):\n    try:\n        # \uc5d0\ub7ec \uc5c6\uc774 task\uac00 \uc644\ub8cc\ub418\uc5c8\uc744 \ub54c \uacb0\uacfc\ub97c \uac00\uc838\uc634\n        result = fut.result()\n        print(f"task {result} done")\n    except BaseException as e:\n        # task\ub97c \uc2e4\ud589\ud558\ub294 \ub3c4\uc911 \ubc1c\uc0dd\ud55c \uc5d0\ub7ec \ucc98\ub9ac\n        print(f"exception: {e}")\n\n\nwith ProcessPoolExecutor(max_workers=3) as executor:\n    # Non-blocking\n    # pool \ud06c\uae30\uc5d0 \uc0c1\uad00 \uc5c6\uc774 \uc791\uc5c5 \uc790\uccb4\ub294 \ubc14\ub85c \uc81c\ucd9c \ub428\n    futures: list[Future[int]] = []\n    for args in [(i,) for i in range(10)]:\n        future = executor.submit(task, *args)\n        future.add_done_callback(callback)\n        futures.append(future)\n    print("submit done")\n\n    # \ubaa8\ub4e0 \uc791\uc5c5\uc774 \uc644\ub8cc\ub420 \ub54c\uae4c\uc9c0 \ub300\uae30\n    wait(futures)\n'})}),"\n",(0,o.jsxs)(e.admonition,{type:"warning",children:[(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"ProcessPoolExecutor"}),"\ub97c \uc0ac\uc6a9\ud560 \ub54c, ",(0,o.jsx)(e.code,{children:"timeout"})," \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 ",(0,o.jsx)(e.code,{children:"Future"}),"\uc758 \uba54\uc11c\ub4dc\ub098, \uc774\ub97c \uc778\uc790\ub85c \ubc1b\ub294 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \ud504\ub85c\uadf8\ub7a8 \uc0c1\uc5d0\uc11c\ub294 timeout\ub41c \uac83\uc73c\ub85c \ubcf4\uc774\uc9c0\ub9cc \uc2e4\uc81c\ub85c\ub294 \uc791\uc5c5\uc774 \uacc4\uc18d \uc9c4\ud589\ub418\ub294 \ubb38\uc81c\uac00 \uc788\uc2b5\ub2c8\ub2e4."]}),(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.code,{children:"timeout"}),"\uc774 \ud544\uc694\ud55c \uacbd\uc6b0, ",(0,o.jsx)(e.code,{children:"ProcessPoolExecutor._processes"}),"\ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud558\uc5ec ",(0,o.jsx)(e.code,{children:"Process"}),"\ub97c \uc885\ub8cc\uc2dc\ud0a4\uac70\ub098 ",(0,o.jsx)(e.code,{children:"multiprocessing"})," \ubaa8\ub4c8\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud574\uc57c\ud569\ub2c8\ub2e4."]})]}),"\n",(0,o.jsx)(e.h2,{id:"processpoolexecutor-with-asyncio",children:"ProcessPoolExecutor with asyncio"}),"\n",(0,o.jsxs)(e.p,{children:["asyncio\ub85c \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ud558\ub2e4\ubcf4\uba74 CPU-bound \uc791\uc5c5\uc5d0 \uc758\ud574 \uc774\ubca4\ud2b8 \ub8e8\ud504\uac00 \ube14\ub85c\ud0b9\ub418\uc5b4 \ub2e4\ub978 \uc791\uc5c5\uc774 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud574\uacb0\ud558\uae30\uc704\ud574 ProcessPoolExecutor\ub9cc \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \uc774\ubca4\ud2b8 \ub8e8\ud504\uac00 \ube14\ub85c\ud0b9\ub418\uae30 \ub54c\ubb38\uc5d0, ",(0,o.jsx)(e.code,{children:"loop.run_in_executor"}),"\ub97c \uc0ac\uc6a9\ud558\uc5ec \ud568\uc218 \uc2e4\ud589\uc744 awaitable\ub85c \ubcc0\uacbd\ud558\ub294 \uc791\uc5c5\uc744 \ud574\uc918\uc57c\ud569\ub2c8\ub2e4."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'import asyncio\nfrom concurrent.futures import ProcessPoolExecutor\n\ndef task(index: int) -> int:\n    print(f"task {index} start in {os.getpid()}")\n\n    if index % 3 == 0:\n        raise RuntimeError(f"task {index} error")\n\n    time.sleep(10 - index % 3)\n\n    return index\n\nasync def cpu_bound_task() -> list[int]:\n    loop = asyncio.get_event_loop()\n    with ProcessPoolExecutor(max_workers=3) as executor:\n        # Non-blocking\n        # pool \ud06c\uae30\uc5d0 \uc0c1\uad00 \uc5c6\uc774 \uc791\uc5c5 \uc790\uccb4\ub294 \ubc14\ub85c \uc81c\ucd9c \ub428\n        futures = [\n            loop.run_in_executor(executor, task, *args) for args in [(i,) for i in range(10)]\n        ]\n        print("submit done")\n\n        results = []\n        for future in asyncio.as_completed(futures):\n            try:\n                # \uc5d0\ub7ec \uc5c6\uc774 task\uac00 \uc644\ub8cc\ub418\uc5c8\uc744 \ub54c \uacb0\uacfc\ub97c \uac00\uc838\uc634\n                # \uae30\ub2e4\ub9ac\ub294 \ub3d9\uc548 \ub2e4\ub978 async \uc791\uc5c5\uc774 \uc2e4\ud589\ub420 \uc218 \uc788\uc74c\n                result = await future\n                print(f"task {result} done")\n\n                results.append(result)\n            except BaseException as e:\n                # task\ub97c \uc2e4\ud589\ud558\ub294 \ub3c4\uc911 \ubc1c\uc0dd\ud55c \uc5d0\ub7ec \ucc98\ub9ac\n                print(f"exception: {e}")\n\n        return results\n'})}),"\n",(0,o.jsx)(e.h2,{id:"\uc790\uc2dd-\ud504\ub85c\uc138\uc2a4\uc5d0\uc11c-signal-\ud578\ub4e4\ub9c1",children:"\uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uc5d0\uc11c signal \ud578\ub4e4\ub9c1"}),"\n",(0,o.jsx)(e.p,{children:"\ud504\ub85c\uc138\uc2a4\uac00 \uc0dd\uc131\ub420 \ub54c,"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"fork\uc758 \uacbd\uc6b0 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub294 \ubd80\ubaa8\uc758 \ubaa8\ub4e0 \uc790\uc6d0\uc744 \uc0c1\uc18d\ubc1b\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc0dd\uc131\ub418\ub294 \uc2dc\uc810\uc758 \ubd80\ubaa8 \ud504\ub85c\uc138\uc2a4\uc758 signal handler\ub97c \uc0c1\uc18d\ubc1b\uc2b5\ub2c8\ub2e4."}),"\n",(0,o.jsx)(e.li,{children:"spawn\uc758 \uacbd\uc6b0 \uc790\uc2dd \ud504\ub85c\uc138\uc2a4\ub294 \ud544\uc694\ud55c \uc790\uc6d0\ub9cc \uc0c1\uc18d\ubc1b\uc2b5\ub2c8\ub2e4."}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"\uc790\uc2dd \ud504\ub85c\uc138\uc2a4\uac00 \uc2dc\uadf8\ub110\uc5d0 \uc758\ud574 \uc885\ub8cc\ub418\ub294 \uac83\uc744 \ub9c9\uc544\uc57c\ud558\ub294 \uacbd\uc6b0\uac00 \uc788\ub294\ub370, \uc774\ub97c \uc704\ud574 Process \uc2dc\uc791 \uc2dc signal handler\ub97c \ubb34\uc2dc\ud558\ub3c4\ub85d \uc124\uc815\ud574\uc57c\ud569\ub2c8\ub2e4."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"import signal\nfrom concurrent.futures import ProcessPoolExecutor\n\n\ndef ignore_signal() -> None:\n    signal.signal(signal.SIGINT, signal.SIG_IGN)\n    signal.signal(signal.SIGTERM, signal.SIG_IGN)\n\n\nwith ProcessPoolExecutor(5, initializer=ignore_signal) as executor:\n    ...\n"})})]})}function d(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(a,{...n})}):a(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>c});var r=t(96540);const o={},s=r.createContext(o);function i(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);