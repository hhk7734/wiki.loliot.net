"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[10491],{28453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>r});var s=n(96540);const o={},t=s.createContext(o);function l(e){const i=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(t.Provider,{value:i},e.children)}},45544:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>x,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"linux/linux-uboot/embedded-linux-boot-process","title":"Embedded Linux boot process","description":"Embedded Linux boot process","source":"@site/docs/linux/linux-uboot/embedded-linux-boot-process.mdx","sourceDirName":"linux/linux-uboot","slug":"/linux/linux-uboot/embedded-linux-boot-process","permalink":"/docs/linux/linux-uboot/embedded-linux-boot-process","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/linux/linux-uboot/embedded-linux-boot-process.mdx","tags":[],"version":"current","lastUpdatedAt":1746545636000,"frontMatter":{"id":"embedded-linux-boot-process","title":"Embedded Linux boot process","sidebar_label":"Boot process","description":"Embedded Linux boot process","keywords":["u-boot","linux","boot process"]},"sidebar":"linux-uboot","next":{"title":"Build","permalink":"/docs/linux/linux-uboot/build-uboot"}}');var o=n(74848),t=n(28453),l=n(86025);const r={id:"embedded-linux-boot-process",title:"Embedded Linux boot process",sidebar_label:"Boot process",description:"Embedded Linux boot process",keywords:["u-boot","linux","boot process"]},a=void 0,d={},c=[{value:"BL1",id:"bl1",level:2},{value:"BL2",id:"bl2",level:2},{value:"BL3-1",id:"bl3-1",level:2},{value:"BL3-2",id:"bl3-2",level:2},{value:"BL3-3",id:"bl3-3",level:2},{value:"Reference",id:"reference",level:2}];function u(e){const i={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("center",{children:(0,o.jsx)("img",{src:(0,l.Ay)("img/linux/linux-uboot/www-uefi-org.png")})}),"\n",(0,o.jsx)(i.h2,{id:"bl1",children:"BL1"}),"\n",(0,o.jsxs)(i.blockquote,{children:["\n",(0,o.jsxs)(i.p,{children:["This stage begins execution from the platform's reset vector in trusted ROM at EL3. BL1 code starts at ",(0,o.jsx)(i.code,{children:"0x00000000"})," (trusted ROM) in the FVP memory map. The BL1 data section is placed at the start of trusted SRAM, ",(0,o.jsx)(i.code,{children:"0x04000000"}),". The functionality implemented by this stage is as follows."]}),"\n"]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["BL1 performs minimal architectural initialization as follows.","\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"Exception vectors"}),"\n",(0,o.jsx)(i.li,{children:"MMU setup"}),"\n",(0,o.jsx)(i.li,{children:"Control register setup"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.li,{children:"Platform initialization"}),"\n",(0,o.jsxs)(i.li,{children:["BL2 image load and execution","\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"BL1 loads a BL2 raw binary image from platform storage, at a platform-specific base address"}),"\n",(0,o.jsx)(i.li,{children:"BL1 passes control to the BL2 image at Secure EL1, starting from its load address"}),"\n",(0,o.jsx)(i.li,{children:"BL1 also passes information about the amount of trusted SRAM used and available for use. This information is populated at a platform-specific memory address"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"bl2",children:"BL2"}),"\n",(0,o.jsxs)(i.blockquote,{children:["\n",(0,o.jsx)(i.p,{children:"BL1 loads and passes control to BL2 at Secure-EL1. BL2 is linked against and loaded at a platform-specific base address (more information can be found later in this document). The functionality implemented by BL2 is as follows."}),"\n"]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"Architectural initialization"}),"\n",(0,o.jsx)(i.li,{children:"Platform initialization"}),"\n",(0,o.jsxs)(i.li,{children:["BL3-0 (System Control Processor Firmware) image load","\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["BL2 loads ",(0,o.jsx)(i.strong,{children:"the optional BL3-0 image"})," from platform storage into a platform-specific region of secure memory"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.li,{children:"BL3-1 (EL3 Runtime Firmware) image load"}),"\n",(0,o.jsxs)(i.li,{children:["BL3-2 (Secure-EL1 Payload) image load","\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["BL2 loads ",(0,o.jsx)(i.strong,{children:"the optional BL3-2 image"})," from platform storage into a platform- specific region of secure memory"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["BL3-3 (Non-trusted Firmware) image load","\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsxs)(i.li,{children:["BL2 loads the BL3-3 image (e.g., ",(0,o.jsx)(i.strong,{children:"UEFI or other test or boot software"}),") from platform storage into ",(0,o.jsx)(i.strong,{children:"non-secure memory"})," as defined by the platform (0x88000000 for FVPs)"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(i.li,{children:["BL3-1 (EL3 Runtime Firmware) execution","\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"BL1 passes control to BL3-1 at the specified entrypoint at EL3"}),"\n",(0,o.jsx)(i.li,{children:"BL2 relies on BL3-1 to pass control to BL3-3 once secure state initialization is complete"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.h2,{id:"bl3-1",children:"BL3-1"}),"\n",(0,o.jsxs)(i.blockquote,{children:["\n",(0,o.jsx)(i.p,{children:"The image for this stage is loaded by BL2 and BL1 passes control to BL3-1 at EL3. BL3-1 executes solely in trusted SRAM. BL3-1 is linked against and loaded at a platform-specific base address (more information can be found later in this document). The functionality implemented by BL3-1 is as follows."}),"\n"]}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"Architectural initialization"}),"\n",(0,o.jsxs)(i.li,{children:["Platform initialization","\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:"GICv2 initialization"}),"\n",(0,o.jsx)(i.li,{children:"GICv3 initialization"}),"\n",(0,o.jsx)(i.li,{children:"Power management initialization"}),"\n",(0,o.jsx)(i.li,{children:"Runtime services initialization"}),"\n",(0,o.jsx)(i.li,{children:"BL3-2 (Secure-EL1 Payload) image initialization"}),"\n",(0,o.jsx)(i.li,{children:"BL3-3 (Non-trusted Firmware) execution"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-text",children:"Trusted SRAM\n+----------+ 0x04040000\n|          |\n|----------|\n|   BL2    |\n|----------|\n|          |\n|----------|\n|   BL31   |\n|----------|\n|          |\n|----------|\n| BL1 (rw) |\n+----------+ 0x04000000\n\nTrusted ROM\n+----------+ 0x04000000\n| BL1 (ro) |\n+----------+ 0x00000000\n"})}),"\n",(0,o.jsx)(i.h2,{id:"bl3-2",children:"BL3-2"}),"\n",(0,o.jsx)(i.p,{children:"Optional BL for Security."}),"\n",(0,o.jsx)(i.h2,{id:"bl3-3",children:"BL3-3"}),"\n",(0,o.jsx)(i.p,{children:"Boot software like u-boot."}),"\n",(0,o.jsx)(i.h2,{id:"reference",children:"Reference"}),"\n",(0,o.jsxs)(i.ul,{children:["\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.a,{href:"https://chromium.googlesource.com/external/github.com/ARM-software/arm-trusted-firmware/+/v0.4-rc1/docs/firmware-design.md",children:"https://chromium.googlesource.com/external/github.com/ARM-software/arm-trusted-firmware/+/v0.4-rc1/docs/firmware-design.md"})}),"\n",(0,o.jsx)(i.li,{children:(0,o.jsx)(i.a,{href:"https://uefi.org/sites/default/files/resources/NXP_Capsule%20update%20with%20MM_Fall%202018%20Plugfest.pdf",children:"https://uefi.org/sites/default/files/resources/NXP_Capsule%20update%20with%20MM_Fall%202018%20Plugfest.pdf"})}),"\n"]})]})}function x(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);