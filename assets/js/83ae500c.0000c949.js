"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[19058],{28453:(e,n,a)=>{a.d(n,{R:()=>$,x:()=>r});var l=a(96540);const i={},t=l.createContext(i);function $(e){const n=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:$(e.components),l.createElement(t.Provider,{value:n},e.children)}},53156:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>s,frontMatter:()=>$,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"lang/cpp/build/makefile/makefile-avr-example","title":"Makefile AVR example","description":"Makefile AVR example","source":"@site/docs/lang/cpp/build/makefile/makefile-avr-example.mdx","sourceDirName":"lang/cpp/build/makefile","slug":"/lang/cpp/build/makefile/makefile-avr-example","permalink":"/docs/lang/cpp/build/makefile/makefile-avr-example","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/lang/cpp/build/makefile/makefile-avr-example.mdx","tags":[],"version":"current","lastUpdatedAt":1746637031000,"frontMatter":{"id":"makefile-avr-example","title":"Makefile AVR example","sidebar_label":"AVR example","description":"Makefile AVR example","keywords":["Makefile","AVR"]},"sidebar":"cpp","previous":{"title":"make help","permalink":"/docs/lang/cpp/build/makefile/help"},"next":{"title":"CMake","permalink":"/docs/lang/cpp/build/cmake/"}}');var i=a(74848),t=a(28453);const $={id:"makefile-avr-example",title:"Makefile AVR example",sidebar_label:"AVR example",description:"Makefile AVR example",keywords:["Makefile","AVR"]},r=void 0,c={},d=[];function o(e){const n={admonition:"admonition",code:"code",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsxs)(n.p,{children:["\uba85\ub839\uc5b4\ub294 ",(0,i.jsx)(n.strong,{children:"Tab\uc73c\ub85c \uc2dc\uc791"}),"\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ubcf5\uc0ac\ud574\uc11c \uc0ac\uc6a9\ud558\uc2dc\ub294 \uacbd\uc6b0 \uc778\ub374\ud2b8\ub97c \ud0ed\uc73c\ub85c \ubcc0\uacbd\ud574\uc8fc\uc138\uc694."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:'# C/C++ AVR Makefile\n# GCC_PATH = /usr/avr8-gnu-toolchain-linux_x86_64/bin\nPREFIX = avr-\n\nTARGET =\nMCU_TARGET=\nMCU_F_CPU =\n\nDEBUG = 1\n\nPROGRAMMER =\nPORT =\nBAUDRATE =\nBITCLOCK = 0.5 # ms\n\nBUILD_DIR = build\n\nUPLOAD = avrdude -p$(MCU_TARGET) -c$@ -v -Uflash:w:$(BUILD_DIR)/$(TARGET).elf:e\n# Disable flash auto erase\n# UPLOAD += -D\n\nrwildcard=$(wildcard $1$2) $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))\n\nifdef GCC_PATH\nCC = $(GCC_PATH)/$(PREFIX)gcc\nCXX = $(GCC_PATH)/$(PREFIX)g++\nCP = $(GCC_PATH)/$(PREFIX)objcopy\nOD = $(GCC_PATH)/$(PREFIX)objdump\nSZ = $(GCC_PATH)/$(PREFIX)size\nelse\nCC = $(PREFIX)gcc\nCXX = $(PREFIX)g++\nCP = $(PREFIX)objcopy\nOD = $(PREFIX)objdump\nSZ = $(PREFIX)size\nendif\n\n# C, CXX COMMON\nC_FLAGS  = -Wall -mmcu=$(MCU_TARGET) -DF_CPU=$(MCU_F_CPU)\nC_FLAGS += -O1\nC_FLAGS += -ffunction-sections -fdata-sections\nC_FLAGS += -fshort-enums\n\n# Dependency\nC_FLAGS += -MMD -MP -MF"$(@:%.o=%.d)"\n\nifeq ($(DEBUG), 1)\nC_FLAGS += -g\nendif\n\nCFLAGS  = $(C_FLAGS)\nCFLAGS += -fpack-struct\n\nCXXFLAGS  = $(C_FLAGS)\nCXXFLAGS += -std=c++17\n\nLDFLAGS  = -mmcu=$(MCU_TARGET) -Wl,-Map,$(BUILD_DIR)/$(TARGET).map\nLDFLAGS += -Wl,--gc-sections\n\nCSRCS =\n\nCXXSRCS =\n\nINC_DIRS =\nINC_DIRS += $(addprefix -I,$(sort $(dir $(CSRCS))))\nINC_DIRS += $(addprefix -I,$(sort $(dir $(CXXSRCS))))\n\nall : $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex\n\n.PHONY: clean\nclean: ;rm -rf $(BUILD_DIR)\n\n.PHONY: upload\nupload: $(PROGRAMMER)\n\n.PHONY:clang-format\nclang-format: $(call rwildcard,,*.c) $(call rwildcard,,*.cpp) $(call rwildcard,,*.h)\n    clang-format -style=file -i -verbose $^\n\n$(BUILD_DIR):\n    mkdir $@\n\nvpath %.c $(sort $(dir $(CSRCS)))\n$(BUILD_DIR)/%.o: %.c | $(BUILD_DIR)\n    $(CC) $(CFLAGS) $(INC_DIRS) -Wa,-a,-ad,-alms=$(@:.o=.lst) -c -o $@ $<\n\nvpath %.cpp $(sort $(dir $(CXXSRCS)))\n$(BUILD_DIR)/%.o: %.cpp | $(BUILD_DIR)\n    $(CXX) $(CXXFLAGS) $(INC_DIRS) -Wa,-a,-ad,-alms=$(@:.o=.lst) -c -o $@ $<\n\nOBJS  = $(addprefix $(BUILD_DIR)/,$(notdir $(CSRCS:.c=.o)))\nOBJS += $(addprefix $(BUILD_DIR)/,$(notdir $(CXXSRCS:.cpp=.o)))\nOBJS += $(call rwildcard,obj,*.o)\n\n$(BUILD_DIR)/$(TARGET).elf: $(OBJS)\n    $(CXX) $(LDFLAGS) -o $@ $^\n    $(OD) -h -S "$@" > "$(@:%.elf=%.lss)"\n    $(SZ) -C --mcu=$(MCU_TARGET) $@\n\n$(BUILD_DIR)/$(TARGET).hex: $(BUILD_DIR)/$(TARGET).elf\n    $(CP) -j .text -j .data -O ihex $< $@\n\n-include $(wildcard $(BUILD_DIR)/*.d)\n\nstk500: ;$(UPLOAD) -P$(PORT)\navrispmkII: ;$(UPLOAD) -B$(BITCLOCK)\narduino: ;$(UPLOAD) -P$(PORT) -b$(BAUDRATE)\nwiring: ;$(UPLOAD) -P$(PORT) -b$(BAUDRATE)\natmelice_isp: ;$(UPLOAD)\n'})})]})}function s(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);