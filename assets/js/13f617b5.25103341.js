"use strict";(self.webpackChunkwiki_loliot_net=self.webpackChunkwiki_loliot_net||[]).push([[68412],{28453:(e,s,a)=>{a.d(s,{R:()=>c,x:()=>r});var n=a(96540);const l={},t=n.createContext(l);function c(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:c(e.components),n.createElement(t.Provider,{value:s},e.children)}},41975:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>c,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"lang/cpp/libraries/cpp-stl","title":"C++ STL","description":"C++ STL Containers","source":"@site/docs/lang/cpp/libraries/cpp-stl.mdx","sourceDirName":"lang/cpp/libraries","slug":"/lang/cpp/libraries/cpp-stl","permalink":"/docs/lang/cpp/libraries/cpp-stl","draft":false,"unlisted":false,"editUrl":"https://github.com/hhk7734/wiki/tree/main/docs/lang/cpp/libraries/cpp-stl.mdx","tags":[],"version":"current","lastUpdatedAt":1742310605000,"frontMatter":{"id":"cpp-stl","title":"C++ STL","description":"C++ STL Containers","keywords":["C++","STL","Container"]},"sidebar":"cpp","previous":{"title":"Static \ub77c\uc774\ube0c\ub7ec\ub9ac \ubb36\uae30","permalink":"/docs/lang/cpp/build/cmake/one-static-lib"},"next":{"title":"C++ Exception handling","permalink":"/docs/lang/cpp/libraries/cpp-exception-handling"}}');var l=a(74848),t=a(28453);const c={id:"cpp-stl",title:"C++ STL",description:"C++ STL Containers",keywords:["C++","STL","Container"]},r=void 0,d={},i=[{value:"Container",id:"container",level:2},{value:"Sequence container",id:"sequence-container",level:3},{value:"std::vector",id:"stdvector",level:4},{value:"std::array",id:"stdarray",level:4},{value:"std::deque",id:"stddeque",level:4},{value:"std::list",id:"stdlist",level:4},{value:"Associative Container",id:"associative-container",level:3},{value:"std::map",id:"stdmap",level:4},{value:"std::unordered_map",id:"stdunordered_map",level:4},{value:"std::set",id:"stdset",level:4},{value:"std::unordered_set",id:"stdunordered_set",level:4},{value:"Container adapter",id:"container-adapter",level:2},{value:"std::queue",id:"stdqueue",level:3},{value:"std::stack",id:"stdstack",level:3}];function o(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.h2,{id:"container",children:"Container"}),"\n",(0,l.jsxs)(s.p,{children:["Ref: ",(0,l.jsx)(s.a,{href:"https://docs.microsoft.com/cpp/standard-library/stl-containers",children:"https://docs.microsoft.com/cpp/standard-library/stl-containers"})]}),"\n",(0,l.jsx)(s.h3,{id:"sequence-container",children:"Sequence container"}),"\n",(0,l.jsx)(s.h4,{id:"stdvector",children:"std::vector"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <vector>\n\ntemplate <class Type, class Allocator = allocator<Type>>\nclass vector;\n"})}),"\n",(0,l.jsxs)(s.p,{children:["If you are using the C style API, use ",(0,l.jsx)(s.code,{children:"std::vector::data()"})," to get a pointer to the first element."]}),"\n",(0,l.jsx)(s.h4,{id:"stdarray",children:"std::array"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <array>\n\ntemplate <class Ty, std::size_t N>\nclass array;\n"})}),"\n",(0,l.jsxs)(s.p,{children:["If you are using the C style API, use ",(0,l.jsx)(s.code,{children:"std::array::data()"})," to get a pointer to the first element."]}),"\n",(0,l.jsx)(s.h4,{id:"stddeque",children:"std::deque"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <deque>\n\ntemplate <class Type, class Allocator = allocator<Type>>\nclass deque;\n"})}),"\n",(0,l.jsx)(s.h4,{id:"stdlist",children:"std::list"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <list>\n\ntemplate <class Type, class Allocator = allocator<Type>>\nclass list;\n"})}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <forward_list>\n\ntemplate <class Type, class Allocator = allocator<Type>>\nclass forward_list;\n"})}),"\n",(0,l.jsx)(s.h3,{id:"associative-container",children:"Associative Container"}),"\n",(0,l.jsx)(s.h4,{id:"stdmap",children:"std::map"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <map>\n\ntemplate<class Key,\n         class Type,\n         class Traits    = less<Key>,\n         class Allocator = allocator<pair<const Key, Type>>>\nclass map;\n\ntemplate<class Key,\n         class Type,\n         class Traits    = less<Key>,\n         class Allocator = allocator<pair<const Key, Type>>>\nclass multimap;\n"})}),"\n",(0,l.jsx)(s.h4,{id:"stdunordered_map",children:"std::unordered_map"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <unordered_map>\n\ntemplate<class Key,\n         class Ty,\n         class Hash  = std::hash<Key>,\n         class Pred  = std::equal_to<Key>,\n         class Alloc = std::allocator<std::pair<const Key, Ty>>>\nclass unordered_map;\n\ntemplate<class Key,\n         class Ty,\n         class Hash  = std::hash<Key>,\n         class Pred  = std::equal_to<Key>,\n         class Alloc = std::allocator<Key>>\nclass unordered_multimap;\n"})}),"\n",(0,l.jsx)(s.h4,{id:"stdset",children:"std::set"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <set>\n\ntemplate<class Key, class Traits = less<Key>, class Allocator = allocator<Key>>\nclass set;\n\ntemplate<class Key, class Compare = less<Key>, class Allocator = allocator<Key>>\nclass multiset;\n"})}),"\n",(0,l.jsx)(s.h4,{id:"stdunordered_set",children:"std::unordered_set"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <unordered_set>\n\ntemplate<class Key,\n         class Hash  = std::hash<Key>,\n         class Pred  = std::equal_to<Key>,\n         class Alloc = std::allocator<Key>>\nclass unordered_set;\n\ntemplate<class Key,\n         class Hash  = std::hash<Key>,\n         class Pred  = std::equal_to<Key>,\n         class Alloc = std::allocator<Key>>\nclass unordered_multiset;\n"})}),"\n",(0,l.jsx)(s.h2,{id:"container-adapter",children:"Container adapter"}),"\n",(0,l.jsx)(s.h3,{id:"stdqueue",children:"std::queue"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <queue>\n\ntemplate<class Type, class Container = deque<Type>>\nclass queue;\n\ntemplate<class Type,\n         class Container = vector<Type>,\n         class Compare   = less<typename Container ::value_type>>\nclass priority_queue;\n"})}),"\n",(0,l.jsx)(s.h3,{id:"stdstack",children:"std::stack"}),"\n",(0,l.jsx)(s.pre,{children:(0,l.jsx)(s.code,{className:"language-cpp",children:"#include <stack>\n\ntemplate <class Type, class Container = deque <Type>>\nclass stack;\n"})})]})}function p(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}}}]);